// @flow
/*eslint-env node*/

type WebSocketClientCallback = (client: WebSocket) => void
type ClientInfo = {
  origin: string,
  secure: boolean,
  req: http$IncomingMessage,
}

type ClientVerifier = (info: ClientInfo, cb?: Function) => void
type ProtocolHandler = (protocols: Array<string>, req: http$IncomingMessage) => string | boolean

type WebSocketServerOptions = {
  host?: string,
  port?: number,
  server?: net$Server,
  verifyClient?: ClientVerifier,
  handleProtocols?: ProtocolHandler,
  path?: string,
  noServer?: boolean,
  clientTracking?: boolean,
  perMessageDeflate?: boolean | Object,
  maxPayload?: number,
}

declare class WebSocketServer extends events$EventEmitter {
  constructor(options: WebSocketServerOptions, cb?: Function): void,
  clients: Array<WebSocket>,
  close(cb: Function): void,
  shouldHandle(req: http$IncomingMessage): boolean,
  handleUpgrade(req: http$IncomingMessage, socket: net$Socket, head: Buffer, cb: WebSocketClientCallback): void,
  completeUpgrade(protocol: string, version: number, req: http$IncomingMessage, socket: net$Socket, head: Buffer, cb: WebSocketClientCallback): void,
}

type Data = string | number | Buffer

type WebSocketOptions = {
  protocols?: Array<string>,
  perMessageDeflate?: boolean | Object,
  handshakeTimeout?: number,
  localAddress?: string,
  protocolVersion?: number,
  headers?: Object,
  origin?: string,
  agent?: http$Agent,
  host?: string,
  family?: number,
  checkServerIdentity?: Function,
  rejectUnauthorized?: boolean,
  passphrase?: string,
  ciphers?: string,
  ecdhCurve?: string,
  cert?: string | Array<string> | Buffer | Array<Buffer>,
  key?: string | Array<string> | Buffer | Array<Buffer>,
  pfx?: string | Buffer,
  ca?: string | Array<string> | Buffer | Array<Buffer>,
}

declare class WebSocket extends events$EventEmitter {
  static Server: Class<WebSocketServer>,
  constructor(address: string, protocols?: string | Array<string>, options?: WebSocketOptions): void,
  +CONNECTING: 0,
  +OPEN: 1,
  +CLOSING: 2,
  +CLOSED: 3,
  +bufferedAmount: number,
  binaryType: string,
  pause(): void,
  resume(): void,
  close(code: number, data: string): void,
  ping(data?: Data, mask?: boolean, failSilently?: boolean): void,
  pong(data?: Data, mask?: boolean, failSilently?: boolean): void,
  send(data: Data, options?: Object | Function, cb?: Function): void,
  terminate(): void,
}

declare module 'ws' {
  declare export default Class<WebSocket>
}
