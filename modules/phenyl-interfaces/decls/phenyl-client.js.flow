// @flow
import type {
  WhereQuery,
  IdQuery,
  IdsQuery,
  CustomQuery,
} from './query.js.flow'
import type { Session } from './session.js.flow' // Object
import type {
  CustomQueryResult,
  SingleQueryResult,
  QueryResult,
} from './query-result.js.flow'
import type {
  CommandResult,
  CustomCommandResult,
  GetCommandResult,
  FetchCommandResult,
  LoginCommandResult,
  LogoutCommandResult,
} from './command-result.js.flow'
import type {
  InsertCommand,
  UpdateCommand,
  DeleteCommand,
  CustomCommand,
  LoginCommand,
  LogoutCommand,
} from './command.js.flow'

export interface PhenylClient {
  find(query: WhereQuery): Promise<QueryResult>,
  findOne(query: WhereQuery): Promise<SingleQueryResult>,
  get(query: IdQuery): Promise<SingleQueryResult>,
  getByIds(query: IdsQuery): Promise<QueryResult>,

  insert(command: InsertCommand): Promise<CommandResult>,
  insertAndGet(command: InsertCommand): Promise<GetCommandResult>,
  insertAndFetch(command: InsertCommand): Promise<FetchCommandResult>,

  update(command: UpdateCommand): Promise<CommandResult>,
  updateAndGet(command: UpdateCommand): Promise<GetCommandResult>,
  updateAndFetch(command: UpdateCommand): Promise<FetchCommandResult>,

  delete(command: DeleteCommand): Promise<CommandResult>,
}

export interface PhenylCustomClient {
  runCustomQuery(query: CustomQuery): Promise<CustomQueryResult>,
  runCustomCommand(command: CustomCommand): Promise<CustomCommandResult>,
}

export interface PhenylAuthClient {
  login(command: LoginCommand): Promise<LoginCommandResult>,
  logout(command: LogoutCommand): Promise<LogoutCommandResult>,
}



export type CustomQueryHandler = (query: CustomQuery, session: ?Session, client: PhenylClient) => Promise<CustomQueryResult>
export type CustomCommandHandler = (command: CustomCommand, session: ?Session, client: PhenylClient) => Promise<CustomCommandResult>
