// @flow
import type {
  Id
} from './id.js.flow'
import type {
  WhereQuery,
  IdQuery,
  IdsQuery,
  CustomQuery,
  PullQuery,
} from './query.js.flow'
import type { KvsClient } from './kvs-client.js.flow'
import type {
  Session,
  PreSession,
} from './session.js.flow'
import type {
  CustomQueryResult,
  SingleQueryResult,
  QueryResult,
  PullQueryResult,
} from './query-result.js.flow'
import type {
  CommandResult,
  CustomCommandResult,
  GetCommandResult,
  MultiValuesCommandResult,
  LoginCommandResult,
  LogoutCommandResult,
  PushCommandResult,
} from './command-result.js.flow'
import type {
  InsertCommand,
  SingleInsertCommand,
  MultiInsertCommand,
  UpdateCommand,
  IdUpdateCommand,
  MultiUpdateCommand,
  DeleteCommand,
  CustomCommand,
  LoginCommand,
  LogoutCommand,
  PushCommand,
} from './command.js.flow'

export interface EntityClient {
  find(query: WhereQuery, sessionId?: ?Id): Promise<QueryResult>,
  findOne(query: WhereQuery, sessionId?: ?Id): Promise<SingleQueryResult>,
  get(query: IdQuery, sessionId?: ?Id): Promise<SingleQueryResult>,
  getByIds(query: IdsQuery, sessionId?: ?Id): Promise<QueryResult>,
  pull(query: PullQuery, sessionId?: ?Id): Promise<PullQueryResult>,

  insert(command: InsertCommand, sessionId?: ?Id): Promise<CommandResult>,
  insertAndGet(command: SingleInsertCommand, sessionId?: ?Id): Promise<GetCommandResult>,
  insertAndGetMulti(command: MultiInsertCommand, sessionId?: ?Id): Promise<MultiValuesCommandResult>,

  update(command: UpdateCommand, sessionId?: ?Id): Promise<CommandResult>,
  updateAndGet(command: IdUpdateCommand, sessionId?: ?Id): Promise<GetCommandResult>,
  updateAndFetch(command: MultiUpdateCommand, sessionId?: ?Id): Promise<MultiValuesCommandResult>,
  push(command: PushCommand, sessionId?: ?Id): Promise<PushCommandResult>,

  delete(command: DeleteCommand, sessionId?: ?Id): Promise<CommandResult>,
}

export interface CustomClient {
  runCustomQuery(query: CustomQuery, sessionId?: ?Id): Promise<CustomQueryResult>,
  runCustomCommand(command: CustomCommand, sessionId?: ?Id): Promise<CustomCommandResult>,
}

export interface AuthClient {
  login(command: LoginCommand, sessionId?: ?Id): Promise<LoginCommandResult>,
  logout(command: LogoutCommand, sessionId?: ?Id): Promise<LogoutCommandResult>,
}

export type RestApiClient = EntityClient & CustomClient & AuthClient

export type SessionClient = KvsClient<Session>

export interface ClientPool {
  entityClient: EntityClient,
  sessionClient: SessionClient,
}
