// @flow
import type {
  WhereQuery,
  IdQuery,
  IdsQuery,
  CustomQuery,
} from './query.js.flow'
import type { KvsClient } from './kvs-client.js.flow'
import type {
  Session,
  PreSession,
} from './session.js.flow'
import type {
  CustomQueryResultOrError,
  SingleQueryResultOrError,
  QueryResultOrError,
} from './query-result.js.flow'
import type {
  CommandResultOrError,
  CustomCommandResultOrError,
  GetCommandResultOrError,
  FetchCommandResultOrError,
  LoginCommandResultOrError,
  LogoutCommandResultOrError,
} from './command-result.js.flow'
import type {
  InsertCommand,
  UpdateCommand,
  DeleteCommand,
  CustomCommand,
  LoginCommand,
  LogoutCommand,
} from './command.js.flow'

export interface EntityClient {
  find(query: WhereQuery): Promise<QueryResultOrError>,
  findOne(query: WhereQuery): Promise<SingleQueryResultOrError>,
  get(query: IdQuery): Promise<SingleQueryResultOrError>,
  getByIds(query: IdsQuery): Promise<QueryResultOrError>,

  insert(command: InsertCommand): Promise<CommandResultOrError>,
  insertAndGet(command: InsertCommand): Promise<GetCommandResultOrError>,
  insertAndFetch(command: InsertCommand): Promise<FetchCommandResultOrError>,

  update(command: UpdateCommand): Promise<CommandResultOrError>,
  updateAndGet(command: UpdateCommand): Promise<GetCommandResultOrError>,
  updateAndFetch(command: UpdateCommand): Promise<FetchCommandResultOrError>,

  delete(command: DeleteCommand): Promise<CommandResultOrError>,
}

export interface CustomClient {
  runCustomQuery(query: CustomQuery): Promise<CustomQueryResultOrError>,
  runCustomCommand(command: CustomCommand): Promise<CustomCommandResultOrError>,
}

export interface AuthClient {
  login(command: LoginCommand): Promise<LoginCommandResultOrError>,
  logout(command: LogoutCommand): Promise<LogoutCommandResultOrError>,
}

export type SessionClient = KvsClient<Session, PreSession>

export interface ClientPool {
  entityClient: EntityClient,
  sessionClient: SessionClient,
}
