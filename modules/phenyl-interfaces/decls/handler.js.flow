// @flow
import type { RequestData } from './request-data.js.flow'
import type { ResponseData } from './response-data.js.flow'
import type { Session } from './session.js.flow'
import type { ClientPool } from './client.js.flow'
import type { CustomQuery } from './query.js.flow'
import type { CustomQueryResult } from './query-result.js.flow'
import type { LoginCommand, CustomCommand } from './command.js.flow'
import type { LoginCommandResult, CustomCommandResult } from './command-result.js.flow'

export type AclHandler = (reqData: RequestData, session: ?Session, clients: ClientPool) => Promise<boolean>
export type ValidationHandler = (reqData: RequestData, session: ?Session, clients: ClientPool) => Promise<boolean>
export type LoginHandler = (loginCommand: LoginCommand, session: ?Session, clients: ClientPool) => Promise<LoginCommandResult>
export type ExecutionWrapper = (reqData: RequestData, session: ?Session, clients: ClientPool, execution?: ExecutionWrapper) => Promise<ResponseData>
export type CustomQueryHandler = (query: CustomQuery, session: ?Session, clients: ClientPool) => Promise<CustomQueryResult>
export type CustomCommandHandler = (command: CustomCommand, session: ?Session, clients: ClientPool) => Promise<CustomCommandResult>
