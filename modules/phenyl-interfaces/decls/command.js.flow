// @flow
import type {
  FindOperation,
  UpdateOperation,
} from 'mongolike-operations'
import type { Entity } from './entity.js.flow' // Object
import type { Id } from './id.js.flow' // string
import type { PreEntity } from './entity.js.flow' // string

type EntityName = string

// see https://docs.mongodb.com/manual/reference/command/insert/
export type InsertCommand = SingleInsertCommand | MultiInsertCommand

export type SingleInsertCommand = {|
  entityName: EntityName, // "insert" key in MongoDB reference
  value: PreEntity<Entity>, // "documents" key in MongoDB reference
  ordered?: boolean,
|}

export type MultiInsertCommand = {|
  entityName: EntityName, // "insert" key in MongoDB reference
  values: Array<PreEntity<Entity>>, // "documents" key in MongoDB reference
  ordered?: boolean,
|}

// see https://docs.mongodb.com/manual/reference/command/update/
export type UpdateCommand = IdUpdateCommand | MultiUpdateCommand

export type IdUpdateCommand = {|
  entityName: EntityName, // "update" key in MongoDB reference
  id: Id,
  operation: UpdateOperation, // "u" key in MongoDB reference
|}

export type MultiUpdateCommand = {|
  entityName: EntityName, // "update" key in MongoDB reference
  +where: FindOperation, // "q" key in MongoDB reference
  operation: UpdateOperation, // "u" key in MongoDB reference
  ordered?: boolean,
|}

// see https://docs.mongodb.com/manual/reference/command/delete/
export type DeleteCommand  = IdDeleteCommand | MultiDeleteCommand

export type IdDeleteCommand = {|
  entityName: EntityName, // "delete" key in MongoDB reference
  id: Id,
|}

export type MultiDeleteCommand = {|
  entityName: EntityName, // "delete" key in MongoDB reference
  +where: FindOperation, // "q" key in MongoDB reference
  limit?: number,
  ordered?: boolean,
|}

export interface CustomCommand {
  name: string, // custom insert command name
  params?: Object
}


export interface LoginCommand {
  credentials: Object,
  entityName: EntityName,
  options?: Object,
}

export interface LogoutCommand {
  sessionId: Id,
  userId: Id,
  entityName: EntityName,
}
